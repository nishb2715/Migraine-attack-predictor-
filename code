import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
import joblib

# Loading the dataset
data = pd.read_excel('migraine_dataset.xlsx')

# Handling missing values (if any)
data = data.dropna()

# Encoding categorical variables
label_encoders = {}
for column in ['Weather', 'Type']:
    le = LabelEncoder()
    data[column] = le.fit_transform(data[column])
    label_encoders[column] = le

# Creating binary target for classification (1 if Triggered_In > 0, else 0)
data['Triggered'] = (data['Triggered_In'] > 0).astype(int)

# Defining features and targets
features = ['Patient_id', 'Diet', 'Sleep Duration', 'Vomit', 'Frequency', 'Intensity', 
            'Visual', 'Location', 'Weather', 'Air-Q', 'Type']
X = data[features]
y_classification = data['Triggered']
y_regression = data['Triggered_In']

# Splitting data
X_train, X_test, y_class_train, y_class_test, y_reg_train, y_reg_test = train_test_split(
    X, y_classification, y_regression, test_size=0.2, random_state=42
)

# Training classification model
clf = RandomForestClassifier(n_estimators=100, random_state=42)
clf.fit(X_train, y_class_train)

# Training regression model
reg = RandomForestRegressor(n_estimators=100, random_state=42)
reg.fit(X_train, y_reg_train)

# Saving models and encoders
joblib.dump(clf, 'migraine_trigger_model.pkl')
joblib.dump(reg, 'migraine_trigger_regression_model.pkl')
joblib.dump(label_encoders, 'label_encoders.pkl')

print("Models and encoders saved successfully.")
